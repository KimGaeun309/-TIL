'''
<알고리즘 설명>
이 알고리즘은 리스트 D를 DP 테이블로 활용해 D[i][j] 에 자리수가 i 인 자연수 중 i 개의 자리 값의 합이 j 가 되는 자연수의 개수에 저장하며 푸는 DP 알고리즘입니다.
리스트 D를 만들어준 후 먼저 자리수가 1인 경우(D[1])의 자연수 개수를 구해 D에 저장해 줍니다.
그리고 D[i][j] = sum(D[i-1][j], D[i-1][j-1], ..., D[i-1][j-9]) (j > 9) 를 이용하여 자리수가 2인 경우부터 자리수가 L인 경우까지 모두 구해 D 에 저장해준 뒤 D[L][S] 에 저장된 값을 리턴해줍니다.

<수행시간 분석>
자리수가 1인 경우를 구해 D 에 저장해주는데 O(S) 시간, 자리수가 2인 것부터 차례대로 구해 D 에 저장해주는데 O(L*S) 시간이 걸립니다. (sum 함수로 리스트의 합을 구하지만 그 리스트의 원소 개수는 항상 10개 이하이기 때문에 상수 시간 연산이 가능합니다)
따라서 이 알고리즘의 수행시간은 O(L*S) 입니다.
'''

def solve(L, S):
	D = [[0], [0]]

	# 자리수가 1인 경우 구해서 DP 테이블에 저장
	for j in range(S):
		if j < 9:
			D[1].append(1)

	# 점화식 이용해서 자리수가 2인 것 ~ L인 것 구해서 저장
	for i in range(2, L+1):
		D.append([0])
		for j in range(1, S+1):
			s = 0
			if j > 10:
				s = j - 9
			D[i].append(sum(D[i-1][s:j+1])) # sum 구해야 할 리스트의 원소 개수가 10개 이하
	
	return D[L][S]
	
	# code here

L, S = [int(x) for x in input().split()]
print(solve(L, S)%2147483647)
